import { Subscription as SubscriptionClass, SubscriptionObserver as SubscriptionObserverClass } from "observable-fns/dist/observable";
export { default as filter } from "observable-fns/dist/filter";
export { default as flatMap } from "observable-fns/dist/flatMap";
export { default as interval } from "observable-fns/dist/interval";
export { default as map } from "observable-fns/dist/map";
export { default as merge } from "observable-fns/dist/merge";
export { default as multicast } from "observable-fns/dist/multicast";
export { default as Observable, ObservableLike } from "observable-fns/dist/observable";
export { default as scan } from "observable-fns/dist/scan";
export { default as Subject } from "observable-fns/dist/subject";
export { default as unsubscribe } from "observable-fns/dist/unsubscribe";
declare type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;
export declare type Subscription<T> = SubscriptionClass<T>;
export declare type SubscriptionObserver<T> = Omit<SubscriptionObserverClass<T>, "_subscription">;
