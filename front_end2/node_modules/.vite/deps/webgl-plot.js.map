{
  "version": 3,
  "sources": ["../../webgl-plot/dist/webglplot.esm.mjs"],
  "sourcesContent": ["class ColorRGBA {\n    r;\n    g;\n    b;\n    a;\n    constructor(r, g, b, a) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n}\n\n/**\n * Baseline class\n */\nclass WebglBase {\n    //private static program: WebGLProgram;\n    intensity;\n    visible;\n    /**\n     * The number of data point pairs in the line\n     */\n    numPoints;\n    /**\n     * The data ponits for webgl array\n     * @internal\n     */\n    xy;\n    /**\n     * The Color of the line\n     */\n    color;\n    /**\n     * The horizontal scale of the line\n     * @default = 1\n     */\n    scaleX;\n    /**\n     * The vertical scale of the line\n     * @default = 1\n     */\n    scaleY;\n    /**\n     * The horizontal offset of the line\n     * @default = 0\n     */\n    offsetX;\n    /**\n     * the vertical offset of the line\n     * @default = 0\n     */\n    offsetY;\n    /**\n     * if this is a close loop line or not\n     * @default = false\n     */\n    loop;\n    /**\n     * total webgl number of points\n     * @internal\n     */\n    webglNumPoints;\n    /**\n     * @private\n     * @internal\n     */\n    _vbuffer;\n    /**\n     * @private\n     * @internal\n     */\n    //public _prog: WebGLProgram;\n    /**\n     * @private\n     * @internal\n     */\n    _coord;\n    /**\n     * @internal\n     */\n    constructor() {\n        this.scaleX = 1;\n        this.scaleY = 1;\n        this.offsetX = 0;\n        this.offsetY = 0;\n        this.loop = false;\n        this._vbuffer = 0;\n        this._coord = 0;\n        this.visible = true;\n        this.intensity = 1;\n        this.xy = new Float32Array([]);\n        this.numPoints = 0;\n        this.color = new ColorRGBA(0, 0, 0, 1);\n        this.webglNumPoints = 0;\n    }\n}\n\n/**\n * The standard Line class\n */\nclass WebglLine extends WebglBase {\n    currentIndex = 0;\n    /**\n     * Create a new line\n     * @param c - the color of the line\n     * @param numPoints - number of data pints\n     * @example\n     * ```typescript\n     * x= [0,1]\n     * y= [1,2]\n     * line = new WebglLine( new ColorRGBA(0.1,0.1,0.1,1), 2);\n     * ```\n     */\n    constructor(c, numPoints) {\n        super();\n        this.webglNumPoints = numPoints;\n        this.numPoints = numPoints;\n        this.color = c;\n        this.xy = new Float32Array(2 * this.webglNumPoints);\n    }\n    /**\n     * Set the X value at a specific index\n     * @param index - the index of the data point\n     * @param x - the horizontal value of the data point\n     */\n    setX(index, x) {\n        this.xy[index * 2] = x;\n    }\n    /**\n     * Set the Y value at a specific index\n     * @param index : the index of the data point\n     * @param y : the vertical value of the data point\n     */\n    setY(index, y) {\n        this.xy[index * 2 + 1] = y;\n    }\n    /**\n     * Get an X value at a specific index\n     * @param index - the index of X\n     */\n    getX(index) {\n        return this.xy[index * 2];\n    }\n    /**\n     * Get an Y value at a specific index\n     * @param index - the index of Y\n     */\n    getY(index) {\n        return this.xy[index * 2 + 1];\n    }\n    /**\n     * Make an equally spaced array of X points\n     * @param start  - the start of the series\n     * @param stepSize - step size between each data point\n     *\n     * @example\n     * ```typescript\n     * //x = [-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8]\n     * const numX = 10;\n     * line.lineSpaceX(-1, 2 / numX);\n     * ```\n     */\n    lineSpaceX(start, stepSize) {\n        for (let i = 0; i < this.numPoints; i++) {\n            // set x to -num/2:1:+num/2\n            this.setX(i, start + stepSize * i);\n        }\n    }\n    /**\n     * Automatically generate X between -1 and 1\n     * equal to lineSpaceX(-1, 2/ number of points)\n     */\n    arrangeX() {\n        this.lineSpaceX(-1, 2 / this.numPoints);\n    }\n    /**\n     * Set a constant value for all Y values in the line\n     * @param c - constant value\n     */\n    constY(c) {\n        for (let i = 0; i < this.numPoints; i++) {\n            // set x to -num/2:1:+num/2\n            this.setY(i, c);\n        }\n    }\n    /**\n     * Add a new Y values to the end of current array and shift it, so that the total number of the pair remains the same\n     * @param data - the Y array\n     *\n     * @example\n     * ```typescript\n     * yArray = new Float32Array([3, 4, 5]);\n     * line.shiftAdd(yArray);\n     * ```\n     */\n    shiftAdd(data) {\n        const shiftSize = data.length;\n        for (let i = 0; i < this.numPoints - shiftSize; i++) {\n            this.setY(i, this.getY(i + shiftSize));\n        }\n        for (let i = 0; i < shiftSize; i++) {\n            this.setY(i + this.numPoints - shiftSize, data[i]);\n        }\n    }\n    /**\n     * Add new Y values to the line and maintain the position of the last data point\n     */\n    addArrayY(yArray) {\n        if (this.currentIndex + yArray.length <= this.numPoints) {\n            for (let i = 0; i < yArray.length; i++) {\n                this.setY(this.currentIndex, yArray[i]);\n                this.currentIndex++;\n            }\n        }\n    }\n    /**\n     * Replace the all Y values of the line\n     */\n    replaceArrayY(yArray) {\n        if (yArray.length == this.numPoints) {\n            for (let i = 0; i < this.numPoints; i++) {\n                this.setY(i, yArray[i]);\n            }\n        }\n    }\n}\n\n/**\n * The step based line plot\n */\nclass WebglStep extends WebglBase {\n    /**\n     * Create a new step line\n     * @param c - the color of the line\n     * @param numPoints - number of data pints\n     * @example\n     * ```typescript\n     * x= [0,1]\n     * y= [1,2]\n     * line = new WebglStep( new ColorRGBA(0.1,0.1,0.1,1), 2);\n     * ```\n     */\n    constructor(c, num) {\n        super();\n        this.webglNumPoints = num * 2;\n        this.numPoints = num;\n        this.color = c;\n        this.xy = new Float32Array(2 * this.webglNumPoints);\n    }\n    /**\n     * Set the Y value at a specific index\n     * @param index - the index of the data point\n     * @param y - the vertical value of the data point\n     */\n    setY(index, y) {\n        this.xy[index * 4 + 1] = y;\n        this.xy[index * 4 + 3] = y;\n    }\n    getX(index) {\n        return this.xy[index * 4];\n    }\n    /**\n     * Get an X value at a specific index\n     * @param index - the index of X\n     */\n    getY(index) {\n        return this.xy[index * 4 + 1];\n    }\n    /**\n     * Make an equally spaced array of X points\n     * @param start  - the start of the series\n     * @param stepSize - step size between each data point\n     *\n     * @example\n     * ```typescript\n     * //x = [-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8]\n     * const numX = 10;\n     * line.lineSpaceX(-1, 2 / numX);\n     * ```\n     */\n    lineSpaceX(start, stepsize) {\n        for (let i = 0; i < this.numPoints; i++) {\n            // set x to -num/2:1:+num/2\n            this.xy[i * 4] = start + i * stepsize;\n            this.xy[i * 4 + 2] = start + (i * stepsize + stepsize);\n        }\n    }\n    /**\n     * Set a constant value for all Y values in the line\n     * @param c - constant value\n     */\n    constY(c) {\n        for (let i = 0; i < this.numPoints; i++) {\n            // set x to -num/2:1:+num/2\n            this.setY(i, c);\n        }\n    }\n    /**\n     * Add a new Y values to the end of current array and shift it, so that the total number of the pair remains the same\n     * @param data - the Y array\n     *\n     * @example\n     * ```typescript\n     * yArray = new Float32Array([3, 4, 5]);\n     * line.shiftAdd(yArray);\n     * ```\n     */\n    shiftAdd(data) {\n        const shiftSize = data.length;\n        for (let i = 0; i < this.numPoints - shiftSize; i++) {\n            this.setY(i, this.getY(i + shiftSize));\n        }\n        for (let i = 0; i < shiftSize; i++) {\n            this.setY(i + this.numPoints - shiftSize, data[i]);\n        }\n    }\n}\n\nclass WebglPolar extends WebglBase {\n    numPoints;\n    xy;\n    color;\n    intenisty;\n    visible;\n    offsetTheta;\n    constructor(c, numPoints) {\n        super();\n        this.webglNumPoints = numPoints;\n        this.numPoints = numPoints;\n        this.color = c;\n        this.intenisty = 1;\n        this.xy = new Float32Array(2 * this.webglNumPoints);\n        this._vbuffer = 0;\n        this._coord = 0;\n        this.visible = true;\n        this.offsetTheta = 0;\n    }\n    /**\n     * @param index: index of the line\n     * @param theta : angle in deg\n     * @param r : radius\n     */\n    setRtheta(index, theta, r) {\n        //const rA = Math.abs(r);\n        //const thetaA = theta % 360;\n        const x = r * Math.cos((2 * Math.PI * (theta + this.offsetTheta)) / 360);\n        const y = r * Math.sin((2 * Math.PI * (theta + this.offsetTheta)) / 360);\n        //const index = Math.round( ((theta % 360)/360) * this.numPoints );\n        this.setX(index, x);\n        this.setY(index, y);\n    }\n    getTheta(index) {\n        //return Math.tan\n        return 0;\n    }\n    getR(index) {\n        //return Math.tan\n        return Math.sqrt(Math.pow(this.getX(index), 2) + Math.pow(this.getY(index), 2));\n    }\n    setX(index, x) {\n        this.xy[index * 2] = x;\n    }\n    setY(index, y) {\n        this.xy[index * 2 + 1] = y;\n    }\n    getX(index) {\n        return this.xy[index * 2];\n    }\n    getY(index) {\n        return this.xy[index * 2 + 1];\n    }\n}\n\n/**\n * The Square class\n */\nclass WebglSquare extends WebglBase {\n    /**\n     * Create a new line\n     * @param c - the color of the line\n     * @example\n     * ```typescript\n     * line = new WebglSquare( new ColorRGBA(0.1,0.1,0.1,0.5) );\n     * ```\n     */\n    constructor(c) {\n        super();\n        this.webglNumPoints = 4;\n        this.numPoints = 4;\n        this.color = c;\n        this.xy = new Float32Array(2 * this.webglNumPoints);\n    }\n    /**\n     * draw a square\n     * @param x1 start x\n     * @param y1 start y\n     * @param x2 end x\n     * @param y2 end y\n     */\n    setSquare(x1, y1, x2, y2) {\n        this.xy = new Float32Array([x1, y1, x1, y2, x2, y1, x2, y2]);\n    }\n}\n\n/**\n * modified functions from:\n * https://github.com/stackgl/gl-vec2\n * See License2.md for more info\n */\nconst scaleAndAdd = (a, b, scale) => {\n    const out = { x: 0, y: 0 };\n    out.x = a.x + b.x * scale;\n    out.y = a.y + b.y * scale;\n    return out;\n};\nconst normal = (dir) => {\n    //get perpendicular\n    const out = set(-dir.y, dir.x);\n    return out;\n};\nconst direction = (a, b) => {\n    //get unit dir of two lines\n    let out = subtract(a, b);\n    out = normalize(out);\n    return out;\n};\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nconst add = (a, b) => {\n    const out = { x: 0, y: 0 };\n    out.x = a.x + b.x;\n    out.y = a.y + b.y;\n    return out;\n};\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nconst dot = (a, b) => {\n    return a.x * b.x + a.y * b.y;\n};\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nconst normalize = (a) => {\n    const out = { x: 0, y: 0 };\n    let len = a.x * a.x + a.y * a.y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out.x = a.x * len;\n        out.y = a.y * len;\n    }\n    return out;\n};\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nconst set = (x, y) => {\n    const out = { x: 0, y: 0 };\n    out.x = x;\n    out.y = y;\n    return out;\n};\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nconst subtract = (a, b) => {\n    const out = { x: 0, y: 0 };\n    out.x = a.x - b.x;\n    out.y = a.y - b.y;\n    return out;\n};\n\n/**\n * inspired and modified from:\n * https://github.com/mattdesl/polyline-normals\n * See License1.md for more info\n */\nconst PolyLine = (lineXY) => {\n    let curNormal;\n    let lineA = { x: 0, y: 0 };\n    let lineB = { x: 0, y: 0 };\n    const out = [];\n    const addNext = (normal, length) => {\n        out.push({ vec2: normal, miterLength: length });\n    };\n    const getXY = (index) => {\n        return { x: lineXY[index * 2], y: lineXY[index * 2 + 1] };\n    };\n    // add initial normals\n    lineA = direction(getXY(1), getXY(0));\n    curNormal = normal(lineA);\n    addNext(curNormal, 1);\n    const numPoints = lineXY.length / 2;\n    for (let i = 1; i < numPoints - 1; i++) {\n        const last = getXY(i - 1);\n        const cur = getXY(i);\n        const next = getXY(i + 1);\n        lineA = direction(cur, last);\n        curNormal = normal(lineA);\n        lineB = direction(next, cur);\n        //stores tangent & miter\n        const miter = computeMiter(lineA, lineB);\n        const miterLen = computeMiterLen(lineA, miter, 1);\n        addNext(miter, miterLen);\n    }\n    // add last normal\n    // no miter, simple segment\n    lineA = direction(getXY(numPoints - 1), getXY(numPoints - 2));\n    curNormal = normal(lineA); //reset normal\n    addNext(curNormal, 1);\n    return out;\n};\nconst computeMiter = (lineA, lineB) => {\n    //get tangent line\n    let tangent = add(lineA, lineB);\n    tangent = normalize(tangent);\n    //get miter as a unit vector\n    const miter = set(-tangent.y, tangent.x);\n    return miter;\n};\nconst computeMiterLen = (lineA, miter, halfThick) => {\n    const tmp = set(-lineA.y, lineA.x);\n    //get the necessary length of our miter\n    return halfThick / dot(miter, tmp);\n};\n\n/**\n * The standard Line class\n */\nclass WebglThickLine extends WebglBase {\n    currentIndex = 0;\n    //protected triPoints: Float32Array;\n    _linePoints;\n    _thicknessRequested = 0;\n    _actualThickness = 0;\n    /**\n     * Create a new line\n     * @param c - the color of the line\n     * @param numPoints - number of data pints\n     * @example\n     * ```typescript\n     * x= [0,1]\n     * y= [1,2]\n     * line = new WebglLine( new ColorRGBA(0.1,0.1,0.1,1), 2);\n     * ```\n     */\n    constructor(c, numPoints, thickness) {\n        super();\n        this.webglNumPoints = numPoints * 2;\n        this.numPoints = numPoints;\n        this.color = c;\n        this._thicknessRequested = thickness;\n        this._linePoints = new Float32Array(numPoints * 2);\n        //this.triPoints = new Float32Array(this.numPoints * 4);\n        this.xy = new Float32Array(2 * this.webglNumPoints);\n    }\n    convertToTriPoints() {\n        //const thick = 0.01;\n        const halfThick = this._actualThickness / 2;\n        const normals = PolyLine(this._linePoints);\n        //console.log(this.linePoints);\n        //console.log(normals);\n        for (let i = 0; i < this.numPoints; i++) {\n            const x = this._linePoints[2 * i];\n            const y = this._linePoints[2 * i + 1];\n            const point = { x: x, y: y };\n            const top = scaleAndAdd(point, normals[i].vec2, normals[i].miterLength * halfThick);\n            const bot = scaleAndAdd(point, normals[i].vec2, -normals[i].miterLength * halfThick);\n            this.xy[i * 4] = top.x;\n            this.xy[i * 4 + 1] = top.y;\n            this.xy[i * 4 + 2] = bot.x;\n            this.xy[i * 4 + 3] = bot.y;\n        }\n    }\n    /**\n     * Set the X value at a specific index\n     * @param index - the index of the data point\n     * @param x - the horizontal value of the data point\n     */\n    setX(index, x) {\n        this._linePoints[index * 2] = x;\n    }\n    /**\n     * Set the Y value at a specific index\n     * @param index : the index of the data point\n     * @param y : the vertical value of the data point\n     */\n    setY(index, y) {\n        this._linePoints[index * 2 + 1] = y;\n    }\n    /**\n     * Make an equally spaced array of X points\n     * @param start  - the start of the series\n     * @param stepSize - step size between each data point\n     *\n     * @example\n     * ```typescript\n     * //x = [-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8]\n     * const numX = 10;\n     * line.lineSpaceX(-1, 2 / numX);\n     * ```\n     */\n    lineSpaceX(start, stepSize) {\n        for (let i = 0; i < this.numPoints; i++) {\n            // set x to -num/2:1:+num/2\n            this.setX(i, start + stepSize * i);\n        }\n    }\n    setThickness(thickness) {\n        this._thicknessRequested = thickness;\n    }\n    getThickness() {\n        return this._thicknessRequested;\n    }\n    setActualThickness(thickness) {\n        this._actualThickness = thickness;\n    }\n}\n\n/**\n * Author Danial Chitnis 2019-20\n *\n * inspired by:\n * https://codepen.io/AzazelN28\n * https://www.tutorialspoint.com/webgl/webgl_modes_of_drawing.htm\n */\n/**\n * The main class for the webgl-plot library\n */\nclass WebglPlot {\n    /**\n     * @private\n     */\n    webgl;\n    /**\n     * Global horizontal scale factor\n     * @default = 1.0\n     */\n    gScaleX;\n    /**\n     * Global vertical scale factor\n     * @default = 1.0\n     */\n    gScaleY;\n    /**\n     * Global X/Y scale ratio\n     * @default = 1\n     */\n    gXYratio;\n    /**\n     * Global horizontal offset\n     * @default = 0\n     */\n    gOffsetX;\n    /**\n     * Global vertical offset\n     * @default = 0\n     */\n    gOffsetY;\n    /**\n     * Global log10 of x-axis\n     * @default = false\n     */\n    gLog10X;\n    /**\n     * Global log10 of y-axis\n     * @default = false\n     */\n    gLog10Y;\n    /**\n     * collection of data lines in the plot\n     */\n    _linesData;\n    /**\n     * collection of auxiliary lines (grids, markers, etc) in the plot\n     */\n    _linesAux;\n    _thickLines;\n    _surfaces;\n    get linesData() {\n        return this._linesData;\n    }\n    get linesAux() {\n        return this._linesAux;\n    }\n    get thickLines() {\n        return this._thickLines;\n    }\n    get surfaces() {\n        return this._surfaces;\n    }\n    _progLine;\n    /**\n     * log debug output\n     */\n    debug = false;\n    /**\n     * Create a webgl-plot instance\n     * @param canvas - the canvas in which the plot appears\n     * @param debug - (Optional) log debug messages to console\n     *\n     * @example\n     *\n     * For HTMLCanvas\n     * ```typescript\n     * const canvas = document.getElementbyId(\"canvas\");\n     *\n     * const devicePixelRatio = window.devicePixelRatio || 1;\n     * canvas.width = canvas.clientWidth * devicePixelRatio;\n     * canvas.height = canvas.clientHeight * devicePixelRatio;\n     *\n     * const webglp = new WebGLplot(canvas);\n     * ...\n     * ```\n     * @example\n     *\n     * For OffScreenCanvas\n     * ```typescript\n     * const offscreen = htmlCanvas.transferControlToOffscreen();\n     *\n     * offscreen.width = htmlCanvas.clientWidth * window.devicePixelRatio;\n     * offscreen.height = htmlCanvas.clientHeight * window.devicePixelRatio;\n     *\n     * const worker = new Worker(\"offScreenCanvas.js\", { type: \"module\" });\n     * worker.postMessage({ canvas: offscreen }, [offscreen]);\n     * ```\n     * Then in offScreenCanvas.js\n     * ```typescript\n     * onmessage = function (evt) {\n     * const wglp = new WebGLplot(evt.data.canvas);\n     * ...\n     * }\n     * ```\n     */\n    constructor(canvas, options) {\n        if (options == undefined) {\n            this.webgl = canvas.getContext(\"webgl\", {\n                antialias: true,\n                transparent: false,\n            });\n        }\n        else {\n            this.webgl = canvas.getContext(\"webgl\", {\n                antialias: options.antialias,\n                transparent: options.transparent,\n                desynchronized: options.deSync,\n                powerPerformance: options.powerPerformance,\n                preserveDrawing: options.preserveDrawing,\n            });\n            this.debug = options.debug == undefined ? false : options.debug;\n        }\n        this.log(\"canvas type is: \" + canvas.constructor.name);\n        this.log(`[webgl-plot]:width=${canvas.width}, height=${canvas.height}`);\n        this._linesData = [];\n        this._linesAux = [];\n        this._thickLines = [];\n        this._surfaces = [];\n        //this.webgl = webgl;\n        this.gScaleX = 1;\n        this.gScaleY = 1;\n        this.gXYratio = 1;\n        this.gOffsetX = 0;\n        this.gOffsetY = 0;\n        this.gLog10X = false;\n        this.gLog10Y = false;\n        // Clear the color\n        this.webgl.clear(this.webgl.COLOR_BUFFER_BIT);\n        // Set the view port\n        this.webgl.viewport(0, 0, canvas.width, canvas.height);\n        this._progLine = this.webgl.createProgram();\n        this.initThinLineProgram();\n        //https://learnopengl.com/Advanced-OpenGL/Blending\n        this.webgl.enable(this.webgl.BLEND);\n        this.webgl.blendFunc(this.webgl.SRC_ALPHA, this.webgl.ONE_MINUS_SRC_ALPHA);\n    }\n    /**\n     * updates and redraws the content of the plot\n     */\n    _drawLines(lines) {\n        const webgl = this.webgl;\n        lines.forEach((line) => {\n            if (line.visible) {\n                webgl.useProgram(this._progLine);\n                const uscale = webgl.getUniformLocation(this._progLine, \"uscale\");\n                webgl.uniformMatrix2fv(uscale, false, new Float32Array([\n                    line.scaleX * this.gScaleX * (this.gLog10X ? 1 / Math.log(10) : 1),\n                    0,\n                    0,\n                    line.scaleY * this.gScaleY * this.gXYratio * (this.gLog10Y ? 1 / Math.log(10) : 1),\n                ]));\n                const uoffset = webgl.getUniformLocation(this._progLine, \"uoffset\");\n                webgl.uniform2fv(uoffset, new Float32Array([line.offsetX + this.gOffsetX, line.offsetY + this.gOffsetY]));\n                const isLog = webgl.getUniformLocation(this._progLine, \"is_log\");\n                webgl.uniform2iv(isLog, new Int32Array([this.gLog10X ? 1 : 0, this.gLog10Y ? 1 : 0]));\n                const uColor = webgl.getUniformLocation(this._progLine, \"uColor\");\n                webgl.uniform4fv(uColor, [line.color.r, line.color.g, line.color.b, line.color.a]);\n                webgl.bufferData(webgl.ARRAY_BUFFER, line.xy, webgl.STREAM_DRAW);\n                webgl.drawArrays(line.loop ? webgl.LINE_LOOP : webgl.LINE_STRIP, 0, line.webglNumPoints);\n            }\n        });\n    }\n    _drawSurfaces(squares) {\n        const webgl = this.webgl;\n        squares.forEach((square) => {\n            if (square.visible) {\n                webgl.useProgram(this._progLine);\n                const uscale = webgl.getUniformLocation(this._progLine, \"uscale\");\n                webgl.uniformMatrix2fv(uscale, false, new Float32Array([\n                    square.scaleX * this.gScaleX * (this.gLog10X ? 1 / Math.log(10) : 1),\n                    0,\n                    0,\n                    square.scaleY * this.gScaleY * this.gXYratio * (this.gLog10Y ? 1 / Math.log(10) : 1),\n                ]));\n                const uoffset = webgl.getUniformLocation(this._progLine, \"uoffset\");\n                webgl.uniform2fv(uoffset, new Float32Array([square.offsetX + this.gOffsetX, square.offsetY + this.gOffsetY]));\n                const isLog = webgl.getUniformLocation(this._progLine, \"is_log\");\n                webgl.uniform2iv(isLog, new Int32Array([this.gLog10X ? 1 : 0, this.gLog10Y ? 1 : 0]));\n                const uColor = webgl.getUniformLocation(this._progLine, \"uColor\");\n                webgl.uniform4fv(uColor, [square.color.r, square.color.g, square.color.b, square.color.a]);\n                webgl.bufferData(webgl.ARRAY_BUFFER, square.xy, webgl.STREAM_DRAW);\n                webgl.drawArrays(webgl.TRIANGLE_STRIP, 0, square.webglNumPoints);\n            }\n        });\n    }\n    _drawTriangles(thickLine) {\n        const webgl = this.webgl;\n        webgl.bufferData(webgl.ARRAY_BUFFER, thickLine.xy, webgl.STREAM_DRAW);\n        webgl.useProgram(this._progLine);\n        const uscale = webgl.getUniformLocation(this._progLine, \"uscale\");\n        webgl.uniformMatrix2fv(uscale, false, new Float32Array([\n            thickLine.scaleX * this.gScaleX * (this.gLog10X ? 1 / Math.log(10) : 1),\n            0,\n            0,\n            thickLine.scaleY * this.gScaleY * this.gXYratio * (this.gLog10Y ? 1 / Math.log(10) : 1),\n        ]));\n        const uoffset = webgl.getUniformLocation(this._progLine, \"uoffset\");\n        webgl.uniform2fv(uoffset, new Float32Array([thickLine.offsetX + this.gOffsetX, thickLine.offsetY + this.gOffsetY]));\n        const isLog = webgl.getUniformLocation(this._progLine, \"is_log\");\n        webgl.uniform2iv(isLog, new Int32Array([0, 0]));\n        const uColor = webgl.getUniformLocation(this._progLine, \"uColor\");\n        webgl.uniform4fv(uColor, [\n            thickLine.color.r,\n            thickLine.color.g,\n            thickLine.color.b,\n            thickLine.color.a,\n        ]);\n        webgl.drawArrays(webgl.TRIANGLE_STRIP, 0, thickLine.xy.length / 2);\n    }\n    _drawThickLines() {\n        this._thickLines.forEach((thickLine) => {\n            if (thickLine.visible) {\n                const calibFactor = Math.min(this.gScaleX, this.gScaleY);\n                //const calibFactor = 10;\n                //console.log(thickLine.getThickness());\n                thickLine.setActualThickness(thickLine.getThickness() / calibFactor);\n                thickLine.convertToTriPoints();\n                this._drawTriangles(thickLine);\n            }\n        });\n    }\n    /**\n     * Draw and clear the canvas\n     */\n    update() {\n        this.clear();\n        this.draw();\n    }\n    /**\n     * Draw without clearing the canvas\n     */\n    draw() {\n        this._drawLines(this.linesData);\n        this._drawLines(this.linesAux);\n        this._drawThickLines();\n        this._drawSurfaces(this.surfaces);\n    }\n    /**\n     * Clear the canvas\n     */\n    clear() {\n        //this.webgl.clearColor(0.1, 0.1, 0.1, 1.0);\n        this.webgl.clear(this.webgl.COLOR_BUFFER_BIT);\n    }\n    /**\n     * adds a line to the plot\n     * @param line - this could be any of line, linestep, histogram, or polar\n     *\n     * @example\n     * ```typescript\n     * const line = new line(color, numPoints);\n     * wglp.addLine(line);\n     * ```\n     */\n    _addLine(line) {\n        //line.initProgram(this.webgl);\n        line._vbuffer = this.webgl.createBuffer();\n        this.webgl.bindBuffer(this.webgl.ARRAY_BUFFER, line._vbuffer);\n        this.webgl.bufferData(this.webgl.ARRAY_BUFFER, line.xy, this.webgl.STREAM_DRAW);\n        //this.webgl.bindBuffer(this.webgl.ARRAY_BUFFER, line._vbuffer);\n        line._coord = this.webgl.getAttribLocation(this._progLine, \"coordinates\");\n        this.webgl.vertexAttribPointer(line._coord, 2, this.webgl.FLOAT, false, 0, 0);\n        this.webgl.enableVertexAttribArray(line._coord);\n    }\n    addDataLine(line) {\n        this._addLine(line);\n        this.linesData.push(line);\n    }\n    addLine = this.addDataLine;\n    addAuxLine(line) {\n        this._addLine(line);\n        this.linesAux.push(line);\n    }\n    addThickLine(thickLine) {\n        this._addLine(thickLine);\n        this._thickLines.push(thickLine);\n    }\n    addSurface(surface) {\n        this._addLine(surface);\n        this.surfaces.push(surface);\n    }\n    initThinLineProgram() {\n        const vertCode = `\r\n      attribute vec2 coordinates;\r\n      uniform mat2 uscale;\r\n      uniform vec2 uoffset;\r\n      uniform ivec2 is_log;\r\n\r\n      void main(void) {\r\n         float x = (is_log[0]==1) ? log(coordinates.x) : coordinates.x;\r\n         float y = (is_log[1]==1) ? log(coordinates.y) : coordinates.y;\r\n         vec2 line = vec2(x, y);\r\n         gl_Position = vec4(uscale*line + uoffset, 0.0, 1.0);\r\n      }`;\n        // Create a vertex shader object\n        const vertShader = this.webgl.createShader(this.webgl.VERTEX_SHADER);\n        // Attach vertex shader source code\n        this.webgl.shaderSource(vertShader, vertCode);\n        // Compile the vertex shader\n        this.webgl.compileShader(vertShader);\n        // Fragment shader source code\n        const fragCode = `\r\n         precision mediump float;\r\n         uniform highp vec4 uColor;\r\n         void main(void) {\r\n            gl_FragColor =  uColor;\r\n         }`;\n        const fragShader = this.webgl.createShader(this.webgl.FRAGMENT_SHADER);\n        this.webgl.shaderSource(fragShader, fragCode);\n        this.webgl.compileShader(fragShader);\n        this._progLine = this.webgl.createProgram();\n        this.webgl.attachShader(this._progLine, vertShader);\n        this.webgl.attachShader(this._progLine, fragShader);\n        this.webgl.linkProgram(this._progLine);\n    }\n    /**\n     * remove the last data line\n     */\n    popDataLine() {\n        this.linesData.pop();\n    }\n    /**\n     * remove all the lines\n     */\n    removeAllLines() {\n        this._linesData = [];\n        this._linesAux = [];\n        this._thickLines = [];\n        this._surfaces = [];\n    }\n    /**\n     * remove all data lines\n     */\n    removeDataLines() {\n        this._linesData = [];\n    }\n    /**\n     * remove all auxiliary lines\n     */\n    removeAuxLines() {\n        this._linesAux = [];\n    }\n    /**\n     * Change the WbGL viewport\n     * @param a\n     * @param b\n     * @param c\n     * @param d\n     */\n    viewport(a, b, c, d) {\n        this.webgl.viewport(a, b, c, d);\n    }\n    log(str) {\n        if (this.debug) {\n            console.log(\"[webgl-plot]:\" + str);\n        }\n    }\n}\n\nexport { ColorRGBA, WebglLine, WebglPlot, WebglPolar, WebglSquare, WebglStep, WebglThickLine };\n"],
  "mappings": "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",
  "names": ["normal"]
}
